name: "basic"
#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:

  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

  logging:
    level: info

  # Root of the MSP directories with keys and certs. The Membership Service Providers is component that aims to offer an abstraction of a membership operation architecture.
  cryptoconfig:
    path: "./crypto-config"

  # Some SDKs support pluggable KV stores, the properties under "credentialStore" are implementation specific
  credentialStore:
    path: "./client-service-kvs"

     # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      path: "./client-service-msp"

  # BCCSP config for the client. Used by GO SDK. It's the Blockchain Cryptographic Service Provider.
  # It offers the implementation of cryptographic standards and algorithms.
  BCCSP:
    security:
     enabled: true
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     level: 256

  tlsCerts:
    systemCertPool: true
    client:
      cert:
        path: "./crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt"
      key:
        path: "./crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key"
  
  tlsCACerts:
    path: "peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/ca.crt"

# [Optional]. But most apps would have this section so that channel objects can be constructed based on the content below.
# If one of your application is creating channels, you might not use this
channels:
  mychannel:
    # Network entity which maintains a ledger and runs chaincode containers in order to perform operations to the ledger. Peers are owned and maintained by members.
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true
        discover: true

      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: false
        eventSource: false
        discover: true

#
# List of participating organizations in this network
organizations:
  Org1:
    mspid: Org1MSP
    cryptoPath: "peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"
    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com
    certificateAuthorities:
      - ca1.example.com
  
  Org2:
    mspid: Org2MSP
    cryptoPath: "peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp"
    peers:
      - peer0.org2.example.com
    certificateAuthorities:
      - ca2.example.com

# List of orderers to send transaction and channel create/update requests to.
# The orderers consent on the order of transactions in a block to be committed to the ledger. For the time being only one orderer is needed.
orderers:
  orderer0.example.com:
    url: grpcs://orderer0.example.com
    grpcOptions:
      ssl-target-name-override: orderer0.example.com
      grpc-max-send-message-length: 15
    tlsCACerts:
      path: "./crypto-config/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem"

# List of peers to send various requests to, including endorsement, query anand event listener registration.
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://peer0.org1.example.com
    # this URL is used to connect the EventHub and registering event listeneners
    eventUrl: grpc://peer0.org1.example.com
    # These parameters should be set in coordination with the keepalive polilicy on the server
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      grpc.http2.keepalive_time: 100000

    tlsCACerts:
      path: "./crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem"

  peer0.org2.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://peer0.org2.example.com
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      grpc.http2.keepalive_time: 100000
    
    tlsCACerts:
      path: "./crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem"

entityMatchers:
  peer:
    - pattern: (\w*)peer0.org1.example.com(\w*)
      urlSubstitutionExp: ${Org1Peer0Ip}:${Org1Peer0Port}
      eventUrlSubstitutionExp: ${Org1Peer0Ip}:${Org1Peer0EventPort}
      sslTargetOverrideUrlSubstitutionExp: peer0.org1.example.com
      mappedHost: peer0.org1.example.com
    
    - pattern: (\w*)peer0.org2.example.com(\w*)
      urlSubstitutionExp: ${Org2Peer0Ip}:${Org2Peer0Port}
      eventUrlSubstitutionExp: ${Org2Peer0Ip}:${Org2Peer0EventPort}
      sslTargetOverrideUrlSubstitutionExp: peer0.org2.example.com
      mappedHost: peer0.org2.example.com

  orderer:
    - pattern: (\w*)orderer0.example.com(\w*)
      urlSubstitutionExp: ${Orderer0Ip}
      sslTargetOverrideUrlSubstitutionExp: orderer0.example.com
      mappedHost: orderer0.example.com

  certificateAuthorities:
    - pattern: (\w*)ca1.example.com(\w*)
      urlSubstitutionExp: ${Org1Peer0Ip}:7054
      mappedHost: ca1.example.com
